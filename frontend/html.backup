<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-F8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Frontend Test</title>
    <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 50px;
            background-color: #f4f4f4;
        }
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            width: 90%;
            max-width: 500px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input[type="text"], textarea {
            width: calc(100% - 22px); /* Account for padding and border */
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box; /* Important for width calculation */
        }
        textarea {
            min-height: 80px;
            resize: vertical; /* Allow vertical resize only */
        }
        button {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #0056b3;
        }
        #outputBox {
            background-color: #e9ecef;
            border: 1px solid #ced4da;
            padding: 10px;
            min-height: 80px;
            border-radius: 4px;
            white-space: pre-wrap; /* Preserve whitespace and newlines */
            word-wrap: break-word; /* Break long words */
        }
        .error {
            color: red;
            font-weight: bold;
        }
        .success {
            color: green;
            font-weight: bold;
        }
    </style>
</head>
<body>

    <div class="container">
        <h2>Frontend Test</h2>

        <div>
            <label for="stringInput">Enter String:</label>
            <input type="text" id="stringInput" placeholder="Type your message here...">
        </div>

        <div>
            <button id="sendButton">Send Message</button>
        </div>

        <div>
            <label for="outputBoxDisplay">Server Response:</label>
            <div id="outputBox">
                <!-- Response will appear here -->
            </div>
        </div>
    </div>

    <script>
        // --- CONFIGURATION ---
        // !!! IMPORTANT: Replace this with your actual backend URL !!!
        const TARGET_URL = "YOUR_BACKEND_ENDPOINT_URL_HERE";
        // Example: const TARGET_URL = "https://api.example.com/process-message";
        // For local testing with a simple echo server, you might use:
        // const TARGET_URL = "https://jsonplaceholder.typicode.com/posts"; // This is a public test API

        document.addEventListener('DOMContentLoaded', () => {
            const stringInput = document.getElementById('stringInput');
            const sendButton = document.getElementById('sendButton');
            const outputBox = document.getElementById('outputBox');

            sendButton.addEventListener('click', async () => {
                const messageToSend = stringInput.value.trim();

                if (!messageToSend) {
                    outputBox.textContent = 'Please enter a message.';
                    outputBox.className = 'error'; // Add error class
                    return;
                }

                if (TARGET_URL === "YOUR_BACKEND_ENDPOINT_URL_HERE") {
                    outputBox.textContent = 'ERROR: Please configure the TARGET_URL in the JavaScript code.';
                    outputBox.className = 'error';
                    console.error("TARGET_URL is not set. Please edit the script tag.");
                    return;
                }


                outputBox.textContent = 'Sending...';
                outputBox.className = ''; // Reset class

                try {
                    const response = await fetch(TARGET_URL, {
                        method: 'POST', // Or 'GET' if your backend expects that
                        headers: {
                            'Content-Type': 'application/json',
                            // Add any other headers your backend might require, e.g., API keys
                            // 'Authorization': 'Bearer YOUR_API_KEY'
                        },
                        body: JSON.stringify({ message: messageToSend }) // Sending data as JSON
                    });

                    if (!response.ok) {
                        // Try to get error message from server response body
                        let errorText = `HTTP error! Status: ${response.status}`;
                        try {
                            const errorData = await response.json(); // Or response.text() if not JSON
                            errorText += ` - ${errorData.error || JSON.stringify(errorData)}`;
                        } catch (e) {
                            // If parsing error body fails, stick to status
                        }
                        throw new Error(errorText);
                    }

                    // Assuming the server sends back JSON with a specific field
                    // e.g., { "reply": "This is the server's reply" }
                    // Or if it's a simple text response: await response.text();
                    const data = await response.json();

                    // Adjust this based on your server's actual response structure
                    if (data && data.reply) { // Example: if server sends { "reply": "..." }
                        outputBox.textContent = data.reply;
                    } else if (typeof data === 'string') { // If server sends plain text
                        outputBox.textContent = data;
                    } else {
                         // If it's a more complex object, stringify it to see
                        outputBox.textContent = 'Received: ' + JSON.stringify(data, null, 2);
                    }
                    outputBox.className = 'success';


                } catch (error) {
                    console.error('Fetch Error:', error);
                    outputBox.textContent = 'Error: ' + error.message;
                    outputBox.className = 'error';
                }
            });
        });
    </script>

</body>
</html>